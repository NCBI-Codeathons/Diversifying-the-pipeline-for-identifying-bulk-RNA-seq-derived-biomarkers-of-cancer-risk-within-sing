imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(-1,-1) , c(1,1)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
venn.diagram(
x = list(KW_signed, AK_signed),
category.names = c("KO/WT",'Treated/KO'), #ko/wt and aav/ko respectively
filename = 'C:/Users/jwang/Documents/DUKE/LAB/180710-wt-aav-ko-rna-seq-koeberl-RNA-SEQUENCING/mouse_treatment_venn_fdr05_logfc1-testest.png',
output=TRUE,
lwd=2,
col=myCol, #border color
fill=alpha(myCol,.6),
# Output features
imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(-1,-1) , c(1,3)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
venn.diagram(
x = list(KW_signed, AK_signed),
category.names = c("KO/WT",'Treated/KO'), #ko/wt and aav/ko respectively
filename = 'C:/Users/jwang/Documents/DUKE/LAB/180710-wt-aav-ko-rna-seq-koeberl-RNA-SEQUENCING/mouse_treatment_venn_fdr05_logfc1-testest.png',
output=TRUE,
lwd=2,
col=myCol, #border color
fill=alpha(myCol,.6),
# Output features
imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(-1,-1) , c(1,-1)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
venn.diagram(
x = list(KW_signed, AK_signed),
category.names = c("KO/WT",'Treated/KO'), #ko/wt and aav/ko respectively
filename = 'C:/Users/jwang/Documents/DUKE/LAB/180710-wt-aav-ko-rna-seq-koeberl-RNA-SEQUENCING/mouse_treatment_venn_fdr05_logfc1-testest.png',
output=TRUE,
lwd=2,
col=myCol, #border color
fill=alpha(myCol,.6),
# Output features
imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(-2,-3) , c(1,-3)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
venn.diagram(
x = list(KW_signed, AK_signed),
category.names = c("KO/WT",'Treated/KO'), #ko/wt and aav/ko respectively
filename = 'C:/Users/jwang/Documents/DUKE/LAB/180710-wt-aav-ko-rna-seq-koeberl-RNA-SEQUENCING/mouse_treatment_venn_fdr05_logfc1-testest.png',
output=TRUE,
lwd=2,
col=myCol, #border color
fill=alpha(myCol,.6),
# Output features
imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(3,-3) , c(1,-3)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
venn.diagram(
x = list(KW_signed, AK_signed),
category.names = c("KO/WT",'Treated/KO'), #ko/wt and aav/ko respectively
filename = 'C:/Users/jwang/Documents/DUKE/LAB/180710-wt-aav-ko-rna-seq-koeberl-RNA-SEQUENCING/mouse_treatment_venn_fdr05_logfc1-testest.png',
output=TRUE,
lwd=2,
col=myCol, #border color
fill=alpha(myCol,.6),
# Output features
imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(-1,-3) , c(1,-3)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
venn.diagram(
x = list(KW_signed, AK_signed),
category.names = c("KO/WT",'Treated/KO'), #ko/wt and aav/ko respectively
filename = 'C:/Users/jwang/Documents/DUKE/LAB/180710-wt-aav-ko-rna-seq-koeberl-RNA-SEQUENCING/mouse_treatment_venn_fdr05_logfc1-testest.png',
output=TRUE,
lwd=2,
col=myCol, #border color
fill=alpha(myCol,.6),
# Output features
imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(-1,-1) , c(1,-3)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
venn.diagram(
x = list(KW_signed, AK_signed),
category.names = c("KO/WT",'Treated/KO'), #ko/wt and aav/ko respectively
#filename = 'C:/Users/jwang/Documents/DUKE/LAB/180710-wt-aav-ko-rna-seq-koeberl-RNA-SEQUENCING/mouse_treatment_venn_fdr05_logfc1-testest.png',
output=TRUE,
lwd=2,
col=myCol, #border color
fill=alpha(myCol,.6),
# Output features
imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(-1,-1) , c(1,-3)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
venn.diagram(
x = list(KW_signed, AK_signed),
category.names = c("KO/WT",'Treated/KO'), #ko/wt and aav/ko respectively
filename = 'C:/Users/jwang/Documents/DUKE/LAB/180710-wt-aav-ko-rna-seq-koeberl-RNA-SEQUENCING/mouse_treatment_venn_fdr05_logfc1-testest.png',
output=TRUE,
lwd=2,
col=myCol, #border color
fill=alpha(myCol,.6),
# Output features
imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(-2,-1) , c(1,-3)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
venn.diagram(
x = list(KW_signed, AK_signed),
category.names = c("KO/WT",'Treated/KO'), #ko/wt and aav/ko respectively
filename = 'C:/Users/jwang/Documents/DUKE/LAB/180710-wt-aav-ko-rna-seq-koeberl-RNA-SEQUENCING/mouse_treatment_venn_fdr05_logfc1-testest.png',
output=TRUE,
lwd=2,
col=myCol, #border color
fill=alpha(myCol,.6),
# Output features
imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(1,1) , c(1,-3)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
venn.diagram(
x = list(KW_signed, AK_signed),
category.names = c("KO/WT",'Treated/KO'), #ko/wt and aav/ko respectively
filename = 'C:/Users/jwang/Documents/DUKE/LAB/180710-wt-aav-ko-rna-seq-koeberl-RNA-SEQUENCING/mouse_treatment_venn_fdr05_logfc1-testest.png',
output=TRUE,
lwd=2,
col=myCol, #border color
fill=alpha(myCol,.6),
# Output features
imagetype="png" ,
height = 2.2 ,
width = 2.2 ,
units='in',
cat.just=list(c(0,-2) , c(1,-3)), #adjust position of titles
#main.fontfamily = 'sans',
resolution = 300)
install.packages('Seurat')
BiocManager::install("CancerSubtypes")
BiocManager::install("RTCGA.mRNA")
knitr::opts_chunk$set(echo = TRUE)
colnames(mRNA)=BRCA.mRNA[,1]
library(CancerSubtypes)
library("RTCGA.mRNA")
rm(list = ls())
data(BRCA.mRNA)
mRNA=t(as.matrix(BRCA.mRNA[,-1]))
colnames(mRNA)=BRCA.mRNA[,1]
###To observe the mean, variance and Median Absolute Deviation distribution of the dataset, it helps users to get the distribution characteristics of the data, e.g. To evaluate whether the dataset fits a normal distribution or not.
data.checkDistribution(mRNA)
index=which(is.na(mRNA))
res1=data.imputation(mRNA,fun="median")
res2=data.imputation(mRNA,fun="mean")
res3=data.imputation(mRNA,fun="microarray")
data
result1=data.normalization(mRNA,type="feature_Median",log2=FALSE)
result2=data.normalization(mRNA,type="feature_zscore",log2=FALSE)
data1=FSbyMAD(mRNA, cut.type="topk",value=1000)
data2=FSbyMAD(mRNA, cut.type="cutoff",value=0.5)
### The input dataset is single gene expression matrix.
data(GeneExp)
result=ExecuteCC(clusterNum=3,d=GeneExp,maxK=10,clusterAlg="hc",distance="pearson",title="GBM")
### The input dataset is multi-genomics data as a list
data(GeneExp)
data(miRNAExp)
GBM=list(GeneExp=GeneExp,miRNAExp=miRNAExp)
result=ExecuteCC(clusterNum=3,d=GBM,maxK=10,clusterAlg="hc",distance="pearson",title="GBM")
data(GeneExp)
result=ExecuteCNMF(GeneExp,clusterNum=3,nrun=30)
### The input dataset is multi-genomics data as a list
data(GeneExp)
data(miRNAExp)
GBM=list(GeneExp=GeneExp,miRNAExp=miRNAExp)
result=ExecuteCNMF(GBM,clusterNum=3,nrun=30)
result
head(GeneExp)
View(GeneExp)
View(GeneExp)
View(miRNAExp)
#data(GeneExp)
#data(miRNAExp)
GBM=list(GeneExp=GeneExp,miRNAExp=miRNAExp)
result=ExecuteSNF(GBM, clusterNum=3, K=20, alpha=0.5, t=20)
?read.csv
filename="C:/Users/jwang/Documents/DUKE/Diversifying-the-pipeline-for-identifying-bulk-RNA-seq-derived-biomarkers-of-cancer-risk-within-sing/PJ017.combined_data.txt"
df <- read.csv(file=filename,nrows=100)
View(df)
View(df)
df <- read.csv(file=filename,nrows=2,sep = '\t')
View(df)
View(df)
df
dim(df)
View(dm[,1:10])
View(df[,1:10])
filename="C:\Users\jwang\Documents\DUKE\Diversifying-the-pipeline-for-identifying-bulk-RNA-seq-derived-biomarkers-of-cancer-risk-within-sing\input_data\rna_counts_matrix\PJ017.counts_matrix.txt"
filename="C:/Users/jwang/Documents/DUKE/Diversifying-the-pipeline-for-identifying-bulk-RNA-seq-derived-biomarkers-of-cancer-risk-within-sing/input_data/rna_counts_matrix/PJ017.counts_matrix.txt"
df <- read.csv(file=filename,nrows=2,sep = '\t')
dim(df)
View(dm[,1:10])
View(df[,1:10])
filename="C:/Users/jwang/Documents/DUKE/Diversifying-the-pipeline-for-identifying-bulk-RNA-seq-derived-biomarkers-of-cancer-risk-within-sing/input_data/rna_counts_matrix/PJ017.counts_matrix.txt"
df <- read.csv(file=filename,sep = '\t')
detectCores()
res=ExecuteCNMF(df,clusterNum=4,nrun=30)
View(head(df))
data.checkDistribution(df)
sum(is.na(df))
gene0=which(rowsum(df)==-0)
gene0=which(rowsum(df)==0)
which(rowsum(df)==0)
rowsum(df)==0
gene0=which(rowsums(df)==0)
gene0=which(rowSums(df)==0)
str(df)
df1=apply(df,as.numeric)
?apply
df1=apply(df,2,as.numeric)
#take first 100 rows/columns
df=df[1:100,1:100]
df1=apply(df,2,as.numeric)
is.na(df) %>% which()
which(is.na(df))
df=data.imputation(df,fun="median")
which(is.na(df))
#feature selection based on variance
df1=FSbyVar(df, cut.type = "topk", value=1000) #top 1000 genes w/ highest variance
#feature selection based on variance
df1=FSbyVar(df, cut.type = "topk", value=10) #top 1000 genes w/ highest variance
sys.time()
Sys.time()
Sys.time()-Sys.time()
start=Sys.time()
res=ExecuteCNMF(df1,clusterNum=4,nrun=1)
View(df1)
View(df1)
start=Sys.time()
res=ExecuteCNMF(df1,clusterNum=2,nrun=1)
class(GeneExp)
class(df1)
df <- read.csv(file=filename,sep = '\t')
class(df)
#convert to matrix, coerce all values to be numeric or NA
df=as.matrix(df)
#remove columns with
sample0=which(colSums(df)==0)
which(is.na(df))
str(df)
df <- read.csv(file=filename,sep = '\t', row.names = 1)
df <- read.csv(file=filename,sep = '\t')#, row.names = 1)
df[:,!"gene"]
df[:,!c('gene')]
df[:,~c('gene')]
df[,! c("gene")]
df[,!c("gene")]
df[,!"gene"]
df[,-c("gene")]
df[,2:]
df[,2:5]
df[,!1]
df[,!2]
df[,-1]
dim(df[,-1])
View(GeneExp)
row.names(df)df$gene
rownames(df)df$gene
row.names(df)
row.names(df)=df$gene
row.names(df)=df$gene
#rownames(df)df$gene
df=df[,-1] #drop firs
#convert to matrix, coerce all values to be numeric or NA
df=as.matrix(df)
#remove columns with
sample0=which(colSums(df)==0)
gene0=which(rowSums(df)==0)
which(is.na(df))
sample0
gene0
length(gene0)
dim(df)
df_filt=df[,-c(sample0, gene0, na_idx)]
na_idx=which(is.na(df)) #none found
df_filt=df[,-c(sample0, gene0, na_idx)]
dim(df_filt)
df_filt=df[-gene0,-c(sample0, na_idx)]
dim(df_filt)
df_filt=df[-gene0,]#-c(sample0, na_idx)]
dim(df_filt)
na_idx
sample9
sample0
c(sample0, na_idx)
res=nmf(df_filt,'brunet',seed=123)
View(df_filt)
res=ExecuteCNMF(df_filt,clusterNum=2,nrun=1)
start=Sys.time()
res=ExecuteCNMF(df_filt,clusterNum=2,nrun=1)
res
res=ExecuteCNMF(df_filt,clusterNum=2,nrun=1)
res
install.packages("NMF")
install.packages("NMF")
library(NMF)
?NMF
nmf(df_filt)
res=nmf(df_filt,4)
library(org.Hs.eg.db)
head(org.Hs.eg.db)
head(keys(org.Hs.eg.db))
mapIds(org.Hs.eg.db,keys= "Pax", keytype="GENENAME", column=("ENTREZID"))
mapIds(org.Hs.eg.db,keys= "Pax7", keytype="GENENAME", column=("ENTREZID"))
mapIds(org.Hs.eg.db,keys= "Pax7", keytype="SYMBOL", column=("ENTREZID"))
mapIds(org.Hs.eg.db,keys= c("CCL3"), keytype="SYMBOL", column=("ENTREZID"))
mapIds(org.Hs.eg.db,keys= "CCL3", keytype="SYMBOL", column=("ENTREZID"))
read.table("C:/Users/jwang/PycharmProjects/business_analysis/temp.txt")
genes=read.table("C:/Users/jwang/PycharmProjects/business_analysis/temp.txt")
#keys: enter list of genes in the format specified in "keytype"
#column: returned column field
entrez=mapIds(org.Hs.eg.db,keys= genes, keytype="SYMBOL", column=("ENTREZID"))
class(genes)
genes$V1
as.list(genes$V1)
list(genes$V1)
genes=list(genes)
genes=read.table("C:/Users/jwang/PycharmProjects/business_analysis/temp.txt")
genes=list(genes)
#keys: enter list of genes in the format specified in "keytype"
#column: returned column field
entrez=mapIds(org.Hs.eg.db,keys= genes, keytype="SYMBOL", column=("ENTREZID"))
genes=read.table("C:/Users/jwang/PycharmProjects/business_analysis/temp.txt", stringsAsFactors = F)
genes=list(genes)
genes
#keys: enter list of genes in the format specified in "keytype"
#column: returned column field
entrez=mapIds(org.Hs.eg.db,keys= genes, keytype="SYMBOL", column=("ENTREZID"))
genes=unlist(genes, use.names=FALSE)
genes
#keys: enter list of genes in the format specified in "keytype"
#column: returned column field
entrez=mapIds(org.Hs.eg.db,keys= genes, keytype="SYMBOL", column=("ENTREZID"))
entrez
write.table(entrez,'temp2-delete.txt')
write.table(entrez,'temp2-delete.txt', row.names = F, col.names = F)
data.frame(entrez)
if (!requireNamespace(“BiocManager”, quietly = TRUE)) install.packages(“BiocManager”) if (!requireNamespace(“devtools”, quietly = TRUE)) install.packages(“devtools”)
BiocManager::install(“pcaMethods”) BiocManager::install(“GSVA”)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
BiocManager::install("pcaMethods")
data(Preoptic_Area)
library(scMappR)
library("scMappR")
install.packages("scMappR")
library(scMappR)
data(POA_example)
knitr::opts_chunk$set(echo = TRUE)
require(org.Hs.eg.db)
?mapIds
setwd("~/DUKE/Diversifying-the-pipeline-for-identifying-bulk-RNA-seq-derived-biomarkers-of-cancer-risk-within-sing/working_data/gene_set_enrichment_on_clusters")
markers=read.table("pos_markers-8.txt")
View(head(markers))
require(dplyr)
entrez=mapIds(org.Hs.eg.db,keys= markers$gene, keytype="SYMBOL", column=("ENTREZID"))
markers$gene
markers=read.table("pos_markers-8.txt",stringsAsFactors = F)
#keys: enter list of genes in the format specified in "keytype"
#column: returned column field
entrez=mapIds(org.Hs.eg.db,keys= markers$gene, keytype="SYMBOL", column=("ENTREZID"))
markers$entrez=entrez
write.table(markers,"pos_markers-8.txt")
require(limma)
require(GO.db)
go_ls=list()
for (i in 1:dim(ordered_clust[1])){
#markers$ez=ent_symb$entrez
c_markers=markers[(markers$cluster==ordered_clust$cluster[i]) & (markers$p_val_adj<=.05), ]
go.out <- goana(unique(c_markers$ez[!is.na(c_markers$ez)]), species="Hs",  universe=NULL)
go.out <- go.out[order(go.out$P.DE),]
#N: number of genes in gene set
go.useful <- go.out[go.out$Ont=="BP" & go.out$N <= 200,]
#names the list with the cluster number
go_ls[[ordered_clust$cluster[i]]]=go.useful
print(paste("GO on cluster:", ordered_clust$cluster[i]))
}
# number of cells in each cluster
ordered_clust=markers %>% group_by(cluster) %>% count %>% arrange(desc(n))
go_ls=list()
for (i in 1:dim(ordered_clust[1])){
#markers$ez=ent_symb$entrez
c_markers=markers[(markers$cluster==ordered_clust$cluster[i]) & (markers$p_val_adj<=.05), ]
go.out <- goana(unique(c_markers$ez[!is.na(c_markers$ez)]), species="Hs",  universe=NULL)
go.out <- go.out[order(go.out$P.DE),]
#N: number of genes in gene set
go.useful <- go.out[go.out$Ont=="BP" & go.out$N <= 200,]
#names the list with the cluster number
go_ls[[ordered_clust$cluster[i]]]=go.useful
print(paste("GO on cluster:", ordered_clust$cluster[i]))
}
ordered_clust
dim(ordered_clust)
for (i in 1:nrow(ordered_clust)){
#markers$ez=ent_symb$entrez
c_markers=markers[(markers$cluster==ordered_clust$cluster[i]) & (markers$p_val_adj<=.05), ]
go.out <- goana(unique(c_markers$ez[!is.na(c_markers$ez)]), species="Hs",  universe=NULL)
go.out <- go.out[order(go.out$P.DE),]
#N: number of genes in gene set
go.useful <- go.out[go.out$Ont=="BP" & go.out$N <= 200,]
#names the list with the cluster number
go_ls[[ordered_clust$cluster[i]]]=go.useful
print(paste("GO on cluster:", ordered_clust$cluster[i]))
}
View(markers)
c_markers
#markers$entrez=ent_symb$entrez
c_markers=markers[(markers$cluster==ordered_clust$cluster[i]) & (markers$p_val_adj<=.05), ]
go.out <- goana(unique(c_markers$entrez[!is.na(c_markers$entrez)]), species="Hs",  universe=NULL)
View(head(go.out))
go_ls=list()
for (i in 1:nrow(ordered_clust)){
#markers$entrez=ent_symb$entrez
c_markers=markers[(markers$cluster==ordered_clust$cluster[i]) & (markers$p_val_adj<=.05), ]
go.out <- goana(unique(c_markers$entrez[!is.na(c_markers$entrez)]), species="Hs",  universe=NULL)
go.out <- go.out[order(go.out$P.DE),]
#N: number of genes in gene set
go.useful <- go.out[go.out$Ont=="BP" & go.out$N <= 200,]
#names the list with the cluster number
go_ls[[ordered_clust$cluster[i]]]=go.useful
print(paste("GO on cluster:", ordered_clust$cluster[i]))
}
ordered_clust
View(head(markers))
head(go_ls[[4]])
View(head(go_ls[[4]]))
View(go.out)
go_ls=list()
for (i in 1:nrow(ordered_clust)){
#goana on each row (aka cell cluster)
#subset cluster markers for total markers table
c_markers=markers[(markers$cluster==ordered_clust$cluster[i]) & (markers$p_val_adj<=.05), ]
go.out <- goana(unique(c_markers$entrez[!is.na(c_markers$entrez)]), species="Hs",  universe=NULL)
#focus on biological processes:BP
#u can also limit size of gene set with column: N
go.useful <- go.out[go.out$Ont=="BP" &go.out$P.DE<0.1]
#order by pvalue
go.out <- go.out[order(go.out$P.DE),]
#names the list with the cluster number
go_ls[[ordered_clust$cluster[i]]]=go.useful
print(paste("GO on cluster:", ordered_clust$cluster[i]))
}
go_ls=list()
for (i in 1:nrow(ordered_clust)){
#goana on each row (aka cell cluster)
#subset cluster markers for total markers table
c_markers=markers[(markers$cluster==ordered_clust$cluster[i]) & (markers$p_val_adj<=.05), ]
go.out <- goana(unique(c_markers$entrez[!is.na(c_markers$entrez)]), species="Hs",  universe=NULL)
#focus on biological processes:BP
#u can also limit size of gene set with column: N
go.useful <- go.out[go.out$Ont=="BP" &go.out$P.DE<0.1,]
#order by pvalue
go.out <- go.out[order(go.out$P.DE),]
#names the list with the cluster number
go_ls[[ordered_clust$cluster[i]]]=go.useful
print(paste("GO on cluster:", ordered_clust$cluster[i]))
}
View(go_ls[[1]])
i=1
View(head(go_ls[[i]]))
View(head(go_ls[[i]],20))
i
i=i+1
View(head(go_ls[[i]],20))
go_ls[[2]]
i=4
View(head(go_ls[[i]],20))
View(head(go_ls[[5]],20))
View(head(go_ls[[6]],20))
View(head(go_ls[[9]],20))
View(head(go_ls[[10]],20))
saveRDS(go_ls,"enriched_gene_sets_by_cluster.rds")
